// <auto-generated />
using System;
using Hx.MenuSystem.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Hx.ArchivaFlow.Migrations.Migrations
{
    [DbContext(typeof(ArchivaFlowMigrationsContext))]
    [Migration("20250419024445_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.PostgreSql);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hx.ArchivaFlow.Domain.Archive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID");

                    b.Property<string>("ArchiveNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ARCHIVE_NO");

                    b.Property<string>("BusinessKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BUSINESS_KEY");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("CONCURRENCYSTAMP");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CONTENTTYPE");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("uuid")
                        .HasColumnName("DELETERID");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DELETIONTIME");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EXTRAPROPERTIES");

                    b.Property<DateTime?>("FilingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("FILING_DATE");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ISDELETED");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LASTMODIFICATIONTIME");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LASTMODIFIERID");

                    b.Property<byte>("MediaType")
                        .HasColumnType("smallint")
                        .HasColumnName("MEDIATYPE");

                    b.Property<string>("Remarks")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("REMARKS");

                    b.Property<byte>("RetentionPeriod")
                        .HasColumnType("smallint")
                        .HasColumnName("RETENTIONPERIOD");

                    b.Property<byte>("SecretLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("SECRETLEVEL");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("STATUS");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TITLE");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("YEAR");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveNo");

                    b.HasIndex("BusinessKey");

                    b.HasIndex("FilingDate");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.HasIndex("Year");

                    b.ToTable("ARC_ARCHIVES", (string)null);
                });

            modelBuilder.Entity("Hx.ArchivaFlow.Domain.Metadata", b =>
                {
                    b.Property<Guid>("ArchiveId")
                        .HasColumnType("uuid")
                        .HasColumnName("ARCHIVE_ID");

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("KEY");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CREATIONTIME");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("CREATORID");

                    b.Property<byte>("DataType")
                        .HasColumnType("smallint")
                        .HasColumnName("DATA_TYPE");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("boolean")
                        .HasColumnName("ISSTATIC");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LASTMODIFICATIONTIME");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("LASTMODIFIERID");

                    b.Property<string>("NavigationProperty")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("NAVIGATION_PROPERTY");

                    b.Property<double>("Order")
                        .HasColumnType("double precision")
                        .HasColumnName("ORDER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("TITLE");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("VALUE");

                    b.HasKey("ArchiveId", "Key");

                    b.HasIndex("ArchiveId");

                    b.HasIndex("Key");

                    b.HasIndex("Value");

                    b.ToTable("ARC_METADATA", (string)null);
                });

            modelBuilder.Entity("Hx.ArchivaFlow.Domain.Metadata", b =>
                {
                    b.HasOne("Hx.ArchivaFlow.Domain.Archive", "Archive")
                        .WithMany("Metadatas")
                        .HasForeignKey("ArchiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Archive");
                });

            modelBuilder.Entity("Hx.ArchivaFlow.Domain.Archive", b =>
                {
                    b.Navigation("Metadatas");
                });
#pragma warning restore 612, 618
        }
    }
}
